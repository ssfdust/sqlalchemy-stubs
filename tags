!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
BasicSQLAlchemyPlugin	sqlmypy.py	/^class BasicSQLAlchemyPlugin(Plugin):$/;"	c
CB	sqlmypy.py	/^CB = Optional[Callable[[T], None]]$/;"	v
CLAUSE_ELEMENT_NAME	sqlmypy.py	/^CLAUSE_ELEMENT_NAME = "sqlalchemy.sql.elements.ClauseElement"  # type: Final$/;"	v
COLUMN_ELEMENT_NAME	sqlmypy.py	/^COLUMN_ELEMENT_NAME = "sqlalchemy.sql.elements.ColumnElement"  # type: Final$/;"	v
COLUMN_NAME	sqlmypy.py	/^COLUMN_NAME = "sqlalchemy.sql.schema.Column"  # type: Final$/;"	v
Development Setup	README.md	/^## Development Setup$/;"	s
Development status	README.md	/^## Development status$/;"	s
GROUPING_NAME	sqlmypy.py	/^GROUPING_NAME = "sqlalchemy.sql.elements.Grouping"  # type: Final$/;"	v
Installation	README.md	/^## Installation$/;"	s
MYPY	sqlmypy.py	/^MYPY = False  # we should support Python 3.5.1 and cases where typing_extensions is not availabl/;"	v
Mypy plugin and stubs for SQLAlchemy	README.md	/^Mypy plugin and stubs for SQLAlchemy$/;"	c
RELATIONSHIP_NAME	sqlmypy.py	/^RELATIONSHIP_NAME = "sqlalchemy.orm.relationships.RelationshipProperty"  # type: Final$/;"	v
SESSION_QUERY_NAME	sqlmypy.py	/^SESSION_QUERY_NAME = "sqlalchemy.orm.session.Session.query"  # type: Final$/;"	v
SQLDataSuite	test/testsql.py	/^class SQLDataSuite(DataSuite):$/;"	c
T	sqlmypy.py	/^T = TypeVar("T")$/;"	v
TypingType	sqlmypy.py	/^    from typing_extensions import Final, Type as TypingType$/;"	x
add_metadata_var	sqlmypy.py	/^def add_metadata_var(api: SemanticAnalyzerPluginInterface, info: TypeInfo) -> None:$/;"	f
add_model_init_hook	sqlmypy.py	/^def add_model_init_hook(ctx: ClassDefContext) -> None:$/;"	f
add_var_to_class	sqlmypy.py	/^def add_var_to_class(name: str, typ: Type, info: TypeInfo) -> None:$/;"	f
addopts	pytest.ini	/^addopts = -nauto$/;"	k	section:pytest
column_hook	sqlmypy.py	/^def column_hook(ctx: FunctionContext) -> Type:$/;"	f
data_prefix	test/testsql.py	/^    data_prefix = test_data_prefix$/;"	v	class:SQLDataSuite
decl_deco_hook	sqlmypy.py	/^def decl_deco_hook(ctx: ClassDefContext) -> None:$/;"	f
decl_info_hook	sqlmypy.py	/^def decl_info_hook(ctx: DynamicClassDefContext) -> None:$/;"	f
description	setup.py	/^description = 'SQLAlchemy stubs and mypy plugin'$/;"	v
files	test/testsql.py	/^        files = ['sqlalchemy-basics.test']$/;"	v	class:SQLDataSuite
find_stub_files	setup.py	/^def find_stub_files():$/;"	f
fullname	sqlmypy.py	/^def fullname(x: Union[FuncBase, SymbolNode]) -> str:$/;"	f
get_argtype_by_name	sqlmypy.py	/^def get_argtype_by_name(ctx: FunctionContext, name: str) -> Optional[Type]:$/;"	f
get_argument_by_name	sqlmypy.py	/^def get_argument_by_name(ctx: FunctionContext, name: str) -> Optional[Expression]:$/;"	f
get_base_class_hook	sqlmypy.py	/^    def get_base_class_hook(self, fullname: str) -> "CB[ClassDefContext]":$/;"	m	class:BasicSQLAlchemyPlugin
get_class_decorator_hook	sqlmypy.py	/^    def get_class_decorator_hook(self, fullname: str) -> "CB[ClassDefContext]":$/;"	m	class:BasicSQLAlchemyPlugin
get_dynamic_class_hook	sqlmypy.py	/^    def get_dynamic_class_hook(self, fullname: str) -> "CB[DynamicClassDefContext]":$/;"	m	class:BasicSQLAlchemyPlugin
get_function_hook	sqlmypy.py	/^    def get_function_hook($/;"	m	class:BasicSQLAlchemyPlugin
get_method_hook	sqlmypy.py	/^    def get_method_hook($/;"	m	class:BasicSQLAlchemyPlugin
get_proper_type	sqlmypy.py	/^    get_proper_type = lambda x: x$/;"	f
grouping_hook	sqlmypy.py	/^def grouping_hook(ctx: FunctionContext) -> Type:$/;"	f
inipath	test/testsql.py	/^inipath = os.path.abspath(os.path.join(prefix, 'test'))$/;"	v
install_instructions	setup.py	/^install_instructions = """\\$/;"	v
is_declarative	sqlmypy.py	/^def is_declarative(info: TypeInfo) -> bool:$/;"	f
map_arg	sqlmypy.py	/^    def map_arg(arg: Type) -> Type:$/;"	f	function:session_query_hook	file:
model_hook	sqlmypy.py	/^def model_hook(ctx: FunctionContext) -> Type:$/;"	f
mypy	test/sqlalchemy.ini	/^[mypy]$/;"	s
name	setup.py	/^name = 'sqlalchemy-stubs'$/;"	v
parse_bool	sqlmypy.py	/^def parse_bool(expr: Expression) -> Optional[bool]:$/;"	f
plugin	sqlmypy.py	/^def plugin(version: str) -> "TypingType[Plugin]":$/;"	f
plugins	test/sqlalchemy.ini	/^plugins = sqlmypy$/;"	k	section:mypy
prefix	test/testsql.py	/^prefix = os.path.dirname(this_file_dir)$/;"	v
pytest	pytest.ini	/^[pytest]$/;"	s
pytest_plugins	conftest.py	/^pytest_plugins = [$/;"	v
python_files	pytest.ini	/^python_files = test*.py$/;"	k	section:pytest
relationship_hook	sqlmypy.py	/^def relationship_hook(ctx: FunctionContext) -> Type:$/;"	f
run_case	test/testsql.py	/^    def run_case(self, testcase: DataDrivenTestCase) -> None:$/;"	m	class:SQLDataSuite
session_query_hook	sqlmypy.py	/^def session_query_hook(ctx: MethodContext) -> Type:$/;"	f
set_declarative	sqlmypy.py	/^def set_declarative(info: TypeInfo) -> None:$/;"	f
shortname	sqlmypy.py	/^def shortname(x: Union[FuncBase, SymbolNode]) -> str:$/;"	f
test_data_prefix	test/testsql.py	/^test_data_prefix = os.path.join(prefix, 'test', 'test-data')$/;"	v
testpaths	pytest.ini	/^testpaths = test$/;"	k	section:pytest
this_file_dir	test/testsql.py	/^this_file_dir = os.path.dirname(os.path.realpath(__file__))$/;"	v
